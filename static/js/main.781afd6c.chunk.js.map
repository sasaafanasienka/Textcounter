{"version":3,"sources":["components/ToolButton/ToolButton.js","contexts/ThemeContext.js","components/PopupMessage/PopupMessage.js","js/utilits/themeClassName.js","components/Text/Text.js","js/utilits/rightWord.js","components/Stat/Stat.js","images/paste_icon.svg","components/ToolPaste/ToolPaste.js","images/copy_icon_light.svg","images/copy_icon_dark.svg","components/ToolCopy/ToolCopy.js","images/delete_icon.svg","js/localStorage.js","js/constants.js","components/Button/Button.js","images/close.svg","components/ButtonClosePopup/ButtonClosePopup.js","components/PopupTitle/PopupTitle.js","components/Popup/Popup.js","components/ToolClear/ToolClear.js","images/darktheme_icon.svg","images/lighttheme_icon.svg","components/ToggleTheme/ToggleTheme.js","components/ToolBar/ToolBar.js","images/fish.svg","components/TextGenerator/TextGenerator.js","images/logo.svg","components/RecycleItem/RecycleItem.js","images/recycle.svg","components/RecycleBin/RecycleBin.js","images/logo_fb_light.svg","components/RecycleButton/RecycleButton.js","images/logo_github_light.svg","images/logo_linkedin_light.svg","images/logo_telegram_light.svg","images/logo_fb_dark.svg","images/logo_github_dark.svg","images/logo_linkedin_dark.svg","images/logo_telegram_dark.svg","components/Footer/Footer.js","components/Main/Main.js","images/avatar.jpg","components/AboutAuthor/AboutAuthor.js","images/logo_dark.svg","components/Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["ToolButton","props","state","className","functionToAction","this","isActive","onClick","src","icon","alt","type","React","Component","themes","light","id","name","modifierClass","background","dark","ThemeContext","createContext","themeClassName","themeProperties","baseClassName","Text","inputClassName","useContext","onChange","onChangeText","document","querySelector","value","placeholder","wordExamples","firstGroup","secondGroup","rightWord","number","word","baseNumber","toString","slice","length","concat","includes","Stat","numbersClassName","textValue","toLowerCase","replace","split","filter","item","ToolCopy","copyIcon","theme","copyIconLight","copyIconDark","event","text","navigator","clipboard","writeText","LocalStorage","property","localStorage","removeItem","setItem","JSON","stringify","undefined","recycle","parse","addToRecycle","console","log","itemForRecycle","makeItemForRecycle","recycleContent","checkLocalStorage","deleteTime","data","content","loadFrom","loadTo","months","Button","buttonClassName","color","style","iconClassName","iconRender","counter","ButtonClosePopup","close","bind","classToClose","classList","remove","closeIcon","PopupTitle","title","Popup","newLocalStorage","ToggleTheme","themeData","darkThemeIcon","lightThemeIcon","onChangeTheme","ToolBar","themeProp","isTextAreaHasContent","TextGenerator","textGen","editText","sendTextToStatCount","axios","get","then","res","editedText","catch","fishicon","RecycleItem","key","keyProp","time","recover","refreshStat","Footer","facebookLogo","githubLogo","linkedinLogo","telegramLogo","textClassName","facebookLogoLight","githubLogoLight","linkedinLogoLight","telegramLogoLight","facebookLogoDark","githubLogoDark","linkedinLogoDark","telegramLogoDark","href","Main","mainClassName","AboutAuthor","avatar","Header","logoImport","classNameByTheme","headerLogo","headerLogo_dark","App","useState","changeTheme","changeText","Provider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.781afd6c.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './tool-button.sass'\r\n\r\nclass ToolButton extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        let className = 'tool-button'\r\n        let functionToAction = null\r\n        if (this.props.isActive === true) {\r\n            className = 'tool-button tool-button_active'\r\n            functionToAction = this.props.onClick\r\n        } \r\n\r\n        return(\r\n            <button className={className}>\r\n                <img className='tool-button__icon'\r\n                    onClick={functionToAction}\r\n                    src={this.props.icon} \r\n                    alt={this.props.type}>\r\n                </img>\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToolButton;","import React from 'react';\r\n\r\nexport const themes = {\r\n    light: {\r\n        id: 0,\r\n        name: 'Светлая тема',\r\n        modifierClass: '',\r\n        background: '#eeeeee',\r\n    },\r\n    dark: {\r\n        id: 1,\r\n        name: 'Темная тема',\r\n        modifierClass: '_dark',\r\n        background: '#222222',\r\n    },\r\n  };\r\n\r\n// export const ThemeContext = React.createContext({\r\n//     theme: themes.light,\r\n//     toggleTheme: () => {},\r\n//   });\r\n\r\nexport const ThemeContext = React.createContext();","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './popup-message.scss'\r\n\r\nclass PopupMessage extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <p className='popup-message popup-message_unactive'></p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PopupMessage;","export function themeClassName(themeProperties, baseClassName) {\r\n    if (themeProperties.id === 0) {\r\n        return baseClassName\r\n    } else {\r\n        return `${baseClassName} ${baseClassName}${themeProperties.modifierClass}`\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './text.scss'\r\nimport EditButton from '../ToolButton/ToolButton';\r\nimport PopupMessage from '../PopupMessage/PopupMessage';\r\n\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport { themeClassName } from '../../js/utilits/themeClassName';\r\n\r\nfunction Text(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext);\r\n    const inputClassName = themeClassName(themeData, 'text__input')\r\n\r\n    function sendTextToStatCount() {\r\n        props.onChangeText(document.querySelector('.text__input').value)\r\n    }\r\n    // function statCount() {\r\n    //     clearTimeout(this.state.timerId)\r\n    //     document.querySelector('.stat').style.opacity = '0.3'\r\n    //     const timerId = setTimeout(() => {\r\n    //         this.props.onChangeText()\r\n    //         document.querySelector('.stat').style.opacity = '1'\r\n    //     }, 250)\r\n    //     this.setState({timerId: timerId})    \r\n    // }\r\n\r\n    // function statChanging() {\r\n    //     // setText('Жопа')\r\n    //     setText(document.querySelector('.text__input').value)\r\n    // }\r\n\r\n    return(\r\n        <div className='text'>\r\n            <textarea onChange={sendTextToStatCount}\r\n                    className={inputClassName} \r\n                    type=\"text\" \r\n                    placeholder=\"Ваш текст\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Text;","const wordExamples  = {\r\n    'знак': ['знак', 'знака', 'знаков'],\r\n    'слово': ['слово', 'слова', 'слов'],\r\n    'абзац': ['абзац', 'абзаца', 'абзацев'],\r\n}\r\n\r\nconst firstGroup = ['01', '21', '31', '41', '51', '61', '71', '81', '91']\r\nconst secondGroup = ['02', '03', '04', '22', '23', '24', '32', '33', '34', '42', '43', '44', \r\n                    '52', '53', '54', '62', '63', '64', '72', '73', '74', '82', '83', '84', '92', '93', '94']\r\n\r\nexport function rightWord(number, word) {\r\n  let baseNumber = 0;\r\n  let rightWord = '';\r\n  if (number.toString().slice(-2).length < 2) {\r\n    baseNumber = '0'.concat(number.toString().slice(-2))\r\n  } else {\r\n    baseNumber = number.toString().slice(-2)\r\n  }\r\n  if (firstGroup.includes(baseNumber)) {\r\n    rightWord = wordExamples[word][0]\r\n  } else if (secondGroup.includes(baseNumber)) {\r\n    rightWord =  wordExamples[word][1]\r\n  } else rightWord = wordExamples[word][2]\r\n  return `${number} ${rightWord}`\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stat.scss'\r\nimport '../../styles/main.scss'\r\nimport { rightWord } from '../../js/utilits/rightWord'\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\nimport { themeClassName } from '../../js/utilits/themeClassName';\r\n\r\nfunction Stat(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext);\r\n    const numbersClassName = themeClassName(themeData, 'stat__number')\r\n\r\n    function symbolsCount() {\r\n        const text = props.textValue\r\n        return text.length\r\n    }\r\n\r\n    function wordsCount() {\r\n        const paragraphSymbol = /\\n/g\r\n        const text = props.textValue.toLowerCase().replace(paragraphSymbol, ' ')\r\n        const words = text.split(' ').filter((item) => { //split делает массив из строк разделенных ' '\r\n            return item !== ''  //filter создает новый массив убирая из старого пустые строки\r\n        })\r\n        return words.length      \r\n    }\r\n\r\n    function paragraphsCount() {\r\n        const text = props.textValue\r\n        const paragraphs = text.split('\\n').filter((item) => { //split делает массив из строк разделенных ' '\r\n            return item !== ''  //filter создает новый массив убирая из старого пустые строки\r\n        })\r\n        return paragraphs.length      \r\n    }\r\n\r\n    return(\r\n        <div className='stat'>\r\n            <p className={numbersClassName}>{rightWord(symbolsCount(), 'знак')}</p>\r\n            <p className={numbersClassName}>{rightWord(wordsCount(), 'слово')}</p>\r\n            <p className={numbersClassName}>{rightWord(paragraphsCount(), 'абзац')}</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Stat;","export default __webpack_public_path__ + \"static/media/paste_icon.661daeb2.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport pasteIcon from '../../images/paste_icon.svg'\r\nimport { showPopupMessage } from '../../js/utilits'\r\nimport ToolButton from '../ToolButton/ToolButton';\r\n\r\nclass ToolPaste extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.pasteInTextArea = this.pasteInTextArea.bind(this);\r\n        this.state = {};\r\n    }\r\n\r\n    pasteInTextArea(event) {\r\n        navigator.clipboard.readText()\r\n        .then(text => {\r\n            document.querySelector('.text__input').value = text\r\n            this.props.onChangeText();\r\n        }).then(() => {\r\n            if (document.querySelector('.text__input').value.length === 0) {\r\n                showPopupMessage(event.clientX, event.clientY, 'ошибка, возможно в буфере находится не текст', 'red')\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ToolButton \r\n                type='paste'\r\n                icon={pasteIcon}\r\n                isActive={this.props.isActive}\r\n                onClick={this.pasteInTextArea}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToolPaste;","export default __webpack_public_path__ + \"static/media/copy_icon_light.b7b0ee85.svg\";","export default __webpack_public_path__ + \"static/media/copy_icon_dark.2bd53001.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport copyIconLight from '../../images/copy_icon_light.svg'\r\nimport copyIconDark from '../../images/copy_icon_dark.svg'\r\nimport { showPopupMessage } from '../../js/utilits'\r\nimport ToolButton from '../ToolButton/ToolButton';\r\n\r\nfunction ToolCopy(props) {\r\n\r\n    let copyIcon\r\n    props.theme === 'light' ? copyIcon = copyIconLight : copyIcon = copyIconDark\r\n\r\n    function copyTextArea(event) {\r\n        const text = document.querySelector('.text__input').value\r\n        navigator.clipboard.writeText(text);\r\n        // showPopupMessage(event.clientX, event.clientY, 'Скопировано в буфер', 'green')\r\n    }\r\n\r\n    return (\r\n        <ToolButton \r\n            type='copy'\r\n            icon={copyIcon}\r\n            isActive={props.isActive}\r\n            onClick={copyTextArea}\r\n        />\r\n    )\r\n    \r\n}\r\n\r\nexport default ToolCopy;","export default __webpack_public_path__ + \"static/media/delete_icon.7a2212e7.svg\";","export class LocalStorage {\r\n\r\n    remove(property) {\r\n        localStorage.removeItem(property)\r\n        localStorage.setItem([property], JSON.stringify({}))\r\n    }\r\n\r\n    checkLocalStorage() {\r\n        // localStorage.clear()\r\n        if (localStorage.recycle === undefined) {\r\n            localStorage.setItem('recycle', JSON.stringify({}))\r\n        } \r\n        // console.log(JSON.parse(localStorage.recycle))\r\n        return JSON.parse(localStorage.recycle)\r\n    }\r\n\r\n    loadToLocalStorage(addToRecycle) {\r\n        console.log(localStorage)\r\n        const itemForRecycle = this.makeItemForRecycle(addToRecycle)\r\n        let recycleContent = this.checkLocalStorage()\r\n        const nameForDeletedItem = itemForRecycle.deleteTime.toString()\r\n        recycleContent[nameForDeletedItem] = itemForRecycle\r\n        localStorage.setItem('recycle', JSON.stringify(recycleContent));\r\n        console.log(localStorage)\r\n    }\r\n\r\n    addTo(property, data) {\r\n        let content = this.loadFrom(property)\r\n        const nameForDeletedItem = data.deleteTime.toString()\r\n        content[nameForDeletedItem] = data\r\n        this.loadTo(property, content)\r\n    }\r\n\r\n    loadTo(property, content) {\r\n        localStorage.setItem(property, JSON.stringify(content));\r\n    }\r\n\r\n    loadFrom(property) {\r\n                // localStorage.clear()\r\n        // console.log(`try to load data from ${property}`)\r\n        if (localStorage[property] === undefined) {\r\n            localStorage.setItem([property], JSON.stringify({}))\r\n        } \r\n        return JSON.parse(localStorage[property])\r\n    }\r\n};\r\n\r\nexport default LocalStorage\r\n\r\n","export const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './button.scss'\r\n\r\nfunction Button(props) {\r\n\r\n    function iconRender() {\r\n        const iconClassName = `button__icon_${props.type}`\r\n        return (props.icon ? \r\n            <img className={iconClassName} alt={props.icon} src={props.icon}></img> : null)\r\n        }\r\n\r\n    function counterRender() {\r\n        return (props.counter && props.counter !== 0 ? \r\n            <div className='button__counter'>{props.counter}</div> : null)\r\n        }\r\n\r\n    function textRender() {\r\n        return (props.text ? props.text : null)\r\n        }\r\n    \r\n    const buttonClassName = `button button_${props.type}`\r\n    const background = props.color\r\n\r\n    return (\r\n        <button onClick={props.onClick} className={buttonClassName} style={{background: background}}>\r\n            {iconRender()}\r\n            {counterRender()}\r\n            {textRender()}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","export default __webpack_public_path__ + \"static/media/close.1287881a.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './button-close-popup.scss'\r\nimport closeIcon from '../../images/close.svg'\r\n\r\nclass ButtonClosePopup extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            type: this.props.type\r\n        };\r\n\r\n        this.close = this.close.bind(this)\r\n\r\n    }\r\n\r\n    close() {\r\n        document.querySelector(`.${this.props.classToClose}`).classList.remove(`${this.props.classToClose}_active`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={this.close} className='button-close-popup'>\r\n                <img src={closeIcon} alt=\"close\" />\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ButtonClosePopup;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './popup-title.scss'\r\n\r\nclass PopupTitle extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <p className='popup-title'>{this.props.title}</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PopupTitle;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ButtonClosePopup from '../ButtonClosePopup/ButtonClosePopup';\r\nimport PopupTitle from '../PopupTitle/PopupTitle';\r\n\r\nimport './popup.scss'\r\n\r\nclass Popup extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='popup'>\r\n                <PopupTitle title={this.props.title}/>\r\n                <ButtonClosePopup classToClose='popup' />\r\n                {this.props.content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Popup;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport deleteIcon from '../../images/delete_icon.svg'\r\nimport LocalStorage from '../../js/localStorage'\r\nimport ToolButton from '../ToolButton/ToolButton';\r\nimport { months } from '../../js/constants'\r\nimport Button from '../Button/Button';\r\nimport Popup from '../Popup/Popup';\r\n\r\nconst newLocalStorage = new LocalStorage();\r\n\r\nclass ToolClear extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.clear = this.clear.bind(this); //это требуется чтобы не потерять котекст\r\n        this.clearTextArea = this.clearTextArea.bind(this); //это требуется чтобы не потерять котекст\r\n        this.loadItemToRecycle = this.loadItemToRecycle.bind(this); //это требуется чтобы не потерять котекст\r\n        this.createPopupContent = this.createPopupContent.bind(this); //это требуется чтобы не потерять котекст\r\n        this.isFreeSpaceInRecycle = this.isFreeSpaceInRecycle.bind(this); //это требуется чтобы не потерять котекст\r\n        this.closePopup = this.closePopup.bind(this); //это требуется чтобы не потерять котекст\r\n\r\n        this.state = {\r\n            isClearRecycle: undefined,\r\n        };\r\n    }\r\n    \r\n    clear() {\r\n        if (this.isFreeSpaceInRecycle() === true) {\r\n            this.loadItemToRecycle()\r\n            this.clearTextArea()\r\n        } else {\r\n            this.props.onPopupInit(this.createPopupContent())\r\n            document.querySelector('.popup').classList.add('popup_active')\r\n        }\r\n    }\r\n    \r\n    clearTextArea() {\r\n        document.querySelector('.text__input').value = ''\r\n        this.props.onChangeText();\r\n        this.props.onChangeInRecycle();\r\n    }\r\n\r\n    isFreeSpaceInRecycle() {\r\n        return(Object.keys(newLocalStorage.loadFrom('recycle')).length < 3 ? true : false)\r\n    }\r\n\r\n    closePopup() {\r\n        document.querySelector('.popup').classList.remove('popup_active')\r\n    }\r\n\r\n    createPopupContent() {\r\n        return (\r\n            <>\r\n                <p className='popup__text'>В корзине слишком много элементов. Очистить корзину?</p>\r\n                <Button type='text' color='red' text='Очистить' onClick={() => {\r\n                                                                    newLocalStorage.loadTo('recycle', {})\r\n                                                                    this.loadItemToRecycle()\r\n                                                                    this.clearTextArea()\r\n                                                                    this.closePopup()\r\n                                                                }} />\r\n                <Button type='text' color='red' text='Удалить и не помещать в корзину' onClick={() => {\r\n                                                                                            this.clearTextArea()\r\n                                                                                            this.closePopup()\r\n                                                                                        }} />\r\n                <Button type='text' color='grey' text='Отмена' onClick={this.closePopup} />\r\n            </>\r\n        )\r\n    }\r\n\r\n    loadItemToRecycle() {\r\n        const deletedText = document.querySelector('.text__input').value\r\n        const current = new Date();\r\n        const currentDate = current.getDate();\r\n        const currentMonth = months[current.getMonth()];\r\n        const currentYear = current.getFullYear();\r\n        const currentHours = current.getHours();\r\n        let currentMinutes = current.getMinutes().toString();\r\n        console.log(currentMinutes.length)\r\n        currentMinutes.length === 1 ? currentMinutes = `0${currentMinutes}` : currentMinutes = currentMinutes\r\n        const currentMiliSeconds = Date.parse(current);\r\n        let textTitle = '';\r\n        (deletedText.length > 18) ? textTitle = deletedText.slice(0, 18).concat('...') : textTitle = deletedText\r\n        const item = {\r\n            deleteTime: currentMiliSeconds,\r\n            deletedPhrase: `Удалено ${currentDate} ${currentMonth} ${currentYear}г. в ${currentHours}:${currentMinutes}`,       \r\n            title: textTitle,\r\n            text: deletedText,\r\n            textLength: deletedText.length     \r\n        }\r\n        newLocalStorage.addTo('recycle', item)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ToolButton \r\n                    type='clear text area'\r\n                    icon={deleteIcon}\r\n                    isActive={this.props.isActive}\r\n                    onClick={this.clear}\r\n                />\r\n                <Popup title='Ошибка' content={this.createPopupContent()}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToolClear;","export default __webpack_public_path__ + \"static/media/darktheme_icon.5712200e.svg\";","export default __webpack_public_path__ + \"static/media/lighttheme_icon.e321a497.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ToolButton from '../ToolButton/ToolButton';\r\nimport darkThemeIcon from '../../images/darktheme_icon.svg'\r\nimport lightThemeIcon from '../../images/lighttheme_icon.svg'\r\n\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\n\r\nfunction ToggleTheme(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext)\r\n    let icon\r\n    themeData.id === 0 ? icon = darkThemeIcon : icon = lightThemeIcon\r\n\r\n    function toggle() {\r\n        themeData.id === 0 ? props.onChangeTheme('dark') : props.onChangeTheme('light')  \r\n    }\r\n\r\n    return(\r\n        <ToolButton \r\n            type='toggle theme'\r\n            icon={icon}\r\n            isActive = {true}\r\n            onClick={toggle}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ToggleTheme;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './toolbar.scss'\r\nimport EditButton from '../ToolButton/ToolButton';\r\nimport PopupMessage from '../PopupMessage/PopupMessage';\r\nimport ToolPaste from '../ToolPaste/ToolPaste';\r\nimport ToolCopy from '../ToolCopy/ToolCopy';\r\nimport ToolClear from '../ToolClear/ToolClear';\r\nimport ToggleTheme from '../ToggleTheme/ToggleTheme';\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\n\r\n\r\nfunction ToolBar(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext);\r\n    let themeProp\r\n    themeData.id === 0 ? themeProp = 'light' : themeProp = 'dark' \r\n\r\n    function onChangeText() {\r\n        props.onChangeText(); //эта строка отправляет данные поля ввода в пропсы maincontent\r\n    }\r\n\r\n    function onChangeInRecycle() {\r\n        console.log('toolbar on change in recycle')\r\n        props.onChangeInRecycle(); //эта строка отправляет данные поля ввода в пропсы maincontent\r\n    }\r\n\r\n    function onPopupInit(popupContent) {\r\n        props.onPopupInit(popupContent)\r\n    }\r\n\r\n    let isTextAreaHasContent = true\r\n\r\n    // let isClibBoardHasContent = true\r\n    if (props.textValue.length === 0) {\r\n        isTextAreaHasContent = false\r\n    }\r\n    // navigator.clipboard.readText()\r\n    // .then(text => {\r\n    //     if (text.length === 0) {\r\n    //         isClibBoardHasContent = false\r\n    //     }    \r\n    // })\r\n    \r\n    return(\r\n        <div className='toolbar'>\r\n            <ToggleTheme onChangeTheme={props.onChangeTheme}/>\r\n            <ToolCopy theme={themeProp} isActive={isTextAreaHasContent} onChangeText={onChangeText}/>\r\n            {/* <ToolPaste isActive={isClibBoardHasContent} onChangeText={this.onChangeText}/> */}\r\n            {/* <ToolClear isActive={isTextAreaHasContent} onChangeText={this.onChangeText} onChangeInRecycle={this.onChangeInRecycle} onPopupInit={this.onPopupInit}/> */}\r\n            {/* <PopupMessage /> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToolBar;","export default __webpack_public_path__ + \"static/media/fish.51d9f3be.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { showPopupMessage } from '../../js/utilits'\r\nimport fishicon from '../../images/fish.svg'\r\nimport Button from '../Button/Button'\r\nimport axios from 'axios'\r\n// import { ThemeContext } from '../../contexts/ThemeContext'\r\n\r\n// const api = (template) => new Api(template);\r\nconst API = 'https://fish-text.ru/get?type=paragraph&number=10'\r\n\r\nclass TextGenerator extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n\r\n        this.textGen = this.textGen.bind(this)\r\n        this.editText = this.editText.bind(this)\r\n        this.sendTextToStatCount = this.sendTextToStatCount.bind(this)\r\n    }\r\n\r\n    sendTextToStatCount(text) {\r\n        this.props.onChangeText(text)\r\n    }\r\n    \r\n    editText(text) {\r\n        const textToReplace = /\\\\n\\\\n/g\r\n        let editedText = text.replace(textToReplace, '\\n')\r\n        return editedText\r\n    }\r\n    \r\n    textGen() {\r\n        axios.get(API)\r\n            .then((res) => {\r\n                const editedText = this.editText(res.data.text)\r\n                document.querySelector('.text__input').value = document.querySelector('.text__input').value + editedText\r\n                this.sendTextToStatCount(document.querySelector('.text__input').value)\r\n            })\r\n            .catch(() => {\r\n                console.log('Error in server request')\r\n                // showPopupMessage(event.clientX, event.clientY, 'Ошибка запроса к серверу fish-text.ru', 'red')\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Button \r\n                type='main' \r\n                color='red' \r\n                onClick={this.textGen} \r\n                icon={fishicon} \r\n                alt='fish text button'\r\n            />\r\n        )\r\n    }\r\n\r\n    // const themeData = React.useContext(ThemeContext);\r\n    // let buttonColor\r\n    // themeData.id === 0 ? buttonColor = 'red' : buttonColor = '#b10000'\r\n\r\n\r\n    // textGen(event) {\r\n    //     api('standings').request()\r\n    //         .then((result) => {\r\n    //             editText(result.text)\r\n    //         })\r\n    //         .catch(() => {\r\n    //             console.log('Error in server request')\r\n    //             // showPopupMessage(event.clientX, event.clientY, 'Ошибка запроса к серверу fish-text.ru', 'red')\r\n    //         })\r\n    // }\r\n\r\n\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    //     this.state = {\r\n    //         popupWasShown: false\r\n    //     }\r\n\r\n    // }\r\n\r\n    // statCount() {\r\n    //     this.props.onChangeText();\r\n    // }\r\n\r\n\r\n    // showPopup(event) {\r\n    //     showPopupMessage(event.clientX, event.clientY, 'генерировать рыбный текст', 'black')\r\n    //     this.setState({popupWasShown: true})\r\n    //     setTimeout(() => {\r\n    //         this.setState({popupWasShown: false})\r\n    //     }, 60000)\r\n    // }\r\n\r\n    // let showPopupFunc = this.showPopup\r\n    // if (this.state.popupWasShown === true) {\r\n    //     showPopupFunc = null;\r\n    // }\r\n    \r\n}\r\n\r\nexport default TextGenerator;","export default __webpack_public_path__ + \"static/media/logo.4a5d448b.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './recycle-item.scss'\r\nimport LocalStorage from '../../js/localStorage'\r\nimport { rightWord } from '../../js/utilits/rightWord';\r\n\r\nconst newLocalStorage = new LocalStorage();\r\n\r\nclass RecycleItem extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            key: this.props.keyProp,\r\n            title: this.props.title,\r\n            time: this.props.time,\r\n            length: this.props.length        \r\n        }\r\n\r\n        this.recover = this.recover.bind(this)\r\n        this.refreshStat = this.refreshStat.bind(this)\r\n    }\r\n\r\n    refreshStat() {\r\n        this.props.onChangeText();\r\n    }\r\n\r\n    recover() {\r\n        const recycle = newLocalStorage.loadFrom('recycle')\r\n        document.querySelector('.text__input').value = recycle[this.state.key].text\r\n        this.refreshStat();\r\n    }\r\n\r\n    render() {\r\n        const key = this.props.keyProp\r\n        const title = this.props.title\r\n        const time = this.props.time\r\n        const length = this.props.length\r\n\r\n        return (\r\n            <div className='recycle-item' key={key}>\r\n                <button  className='recycle-item__button' onClick={this.recover}>\r\n                    <p className='recycle-item__title'>{title}</p>\r\n                    <p className='recycle-item__subtitle'>{rightWord(length, 'знак')}</p>\r\n                    <p className='recycle-item__subtitle'>{time}</p>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RecycleItem;","export default __webpack_public_path__ + \"static/media/recycle.e52d6c54.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './recycle-bin.scss'\r\nimport LocalStorage from '../../js/localStorage'\r\nimport RecycleItem from '../RecycleItem/RecycleItem';\r\nimport Button from '../Button/Button'\r\nimport ButtonClosePopup from '../ButtonClosePopup/ButtonClosePopup';\r\nimport PopupTitle from '../PopupTitle/PopupTitle';\r\n\r\nconst newLocalStorage = new LocalStorage();\r\n\r\nclass RecycleBin extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            recycleContent: this.props.itemsInRecycle,\r\n        }\r\n\r\n        this.renderAllItems = this.renderAllItems.bind(this)\r\n        this.renderItem = this.renderItem.bind(this)\r\n        this.refreshRecycle = this.refreshRecycle.bind(this)\r\n        this.refreshStat = this.refreshStat.bind(this)\r\n        this.clearAll = this.clearAll.bind(this)\r\n    }\r\n\r\n    refreshRecycle() {\r\n        this.props.onChangeInRecycle();\r\n    }\r\n\r\n    refreshStat() {\r\n        this.props.onChangeText();\r\n    }\r\n\r\n    renderAllItems() {\r\n        const recycle = this.props.itemsInRecycle\r\n\r\n        let itemsDOM = [];\r\n        for (let item in recycle) {\r\n            itemsDOM.push(this.renderItem(recycle[item].deleteTime, recycle[item].title, recycle[item].deletedPhrase, recycle[item].textLength))\r\n        }\r\n        return itemsDOM\r\n    }\r\n\r\n    renderItem(key, title, time, length) {\r\n        return (\r\n            <RecycleItem keyProp={key} title={title} time={time} length={length} onChangeInRecycle={this.refreshRecycle} onChangeText={this.refreshStat}/>\r\n        )\r\n    }\r\n\r\n    renderClearAllButton() {\r\n        return (Object.keys(this.props.itemsInRecycle).length !== 0 ?\r\n        <Button type='text' color='red' onClick={this.clearAll} text='очистить корзину' alt='clear recycle bin button'/> : null)\r\n    }\r\n\r\n    clearAll() {\r\n        newLocalStorage.loadTo('recycle', {})\r\n        this.refreshRecycle()\r\n    }\r\n\r\n    render() {\r\n        let title = 'Корзина'\r\n        if (Object.keys(this.props.itemsInRecycle).length === 0) {\r\n            title = title.concat(' пуста')\r\n        }\r\n\r\n        return(\r\n            <div className='recycle-bin' onMouseLeave={this.closeAfterMouseLeaving} onMouseEnter={this.stopClosing}>\r\n                <PopupTitle title={title}/>\r\n                <ButtonClosePopup classToClose='recycle-bin'/>\r\n                {this.renderAllItems()}\r\n                {this.renderClearAllButton()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecycleBin;","export default __webpack_public_path__ + \"static/media/logo_fb_light.1b53cc59.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport LocalStorage from '../../js/localStorage'\r\nimport RecoverButton from '../RecycleItem/RecycleItem';\r\n\r\nimport recycleicon from '../../images/recycle.svg'\r\nimport RecycleBin from '../RecycleBin/RecycleBin';\r\n\r\nimport Button from '../Button/Button'\r\n\r\nconst newLocalStorage = new LocalStorage();\r\n\r\nclass RecycleButton extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            recycleContent: this.props.itemsInRecycle\r\n        }\r\n\r\n        this.showRecycleBin = this.showRecycleBin.bind(this)\r\n    }\r\n\r\n    showRecycleBin() {\r\n        document.querySelector('.recycle-bin').classList.add('recycle-bin_active')\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Button \r\n            type='main' \r\n            color='black' \r\n            onClick={this.showRecycleBin} \r\n            icon={recycleicon} \r\n            alt='recycle bin button'\r\n            counter={Object.keys(this.props.itemsInRecycle).length}\r\n        />)\r\n    }\r\n}\r\n\r\nexport default RecycleButton;","export default __webpack_public_path__ + \"static/media/logo_github_light.b54a62b8.svg\";","export default __webpack_public_path__ + \"static/media/logo_linkedin_light.89ce2e72.svg\";","export default __webpack_public_path__ + \"static/media/logo_telegram_light.c3f7acaa.svg\";","export default __webpack_public_path__ + \"static/media/logo_fb_dark.bbfc0d48.svg\";","export default __webpack_public_path__ + \"static/media/logo_github_dark.e9062407.svg\";","export default __webpack_public_path__ + \"static/media/logo_linkedin_dark.5e1d4a88.svg\";","export default __webpack_public_path__ + \"static/media/logo_telegram_dark.8e95b74e.svg\";","import React from 'react';\r\nimport './Footer.scss';\r\nimport facebookLogoLight from '../../images/logo_fb_light.svg'\r\nimport githubLogoLight from '../../images/logo_github_light.svg'\r\nimport linkedinLogoLight from '../../images/logo_linkedin_light.svg'\r\nimport telegramLogoLight from '../../images/logo_telegram_light.svg'\r\nimport facebookLogoDark from '../../images/logo_fb_dark.svg'\r\nimport githubLogoDark from '../../images/logo_github_dark.svg'\r\nimport linkedinLogoDark from '../../images/logo_linkedin_dark.svg'\r\nimport telegramLogoDark from '../../images/logo_telegram_dark.svg'\r\n\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport { themeClassName } from '../../js/utilits/themeClassName';\r\n\r\nfunction Footer() {\r\n  const themeData = React.useContext(ThemeContext);\r\n\r\n  const textClassName = themeClassName(themeData, 'footer__text')\r\n  let facebookLogo, githubLogo, linkedinLogo, telegramLogo\r\n  if (themeData.id === 0) {\r\n    facebookLogo = facebookLogoLight\r\n    githubLogo = githubLogoLight\r\n    linkedinLogo = linkedinLogoLight\r\n    telegramLogo = telegramLogoLight\r\n  } else {\r\n    facebookLogo = facebookLogoDark\r\n    githubLogo = githubLogoDark\r\n    linkedinLogo = linkedinLogoDark\r\n    telegramLogo = telegramLogoDark\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <a className='footer__link' href=\"./about\"><p className={textClassName}>&copy; Александр Афанасенко, 2021 | Об авторе</p></a>\r\n      <div className='footer__social-links'>\r\n        <a className='footer__icon-link' href=\"https://www.facebook.com/sasaafanasienka\">\r\n            <img src={facebookLogo} alt=\"Facebook logo\" />\r\n        </a>\r\n        <a className='footer__icon-link' href=\"https://github.com/sasaafanasienka\">\r\n            <img src={githubLogo} alt=\"Facebook logo\" />\r\n        </a>\r\n        <a className='footer__icon-link' href=\"https://www.linkedin.com/in/александр-афанасенко-bb672b15a/\">\r\n            <img src={linkedinLogo} alt=\"LinkedIn logo\" />\r\n        </a>\r\n        <a className='footer__icon-link' href=\"https://t.me/sanya2020327\">\r\n            <img src={telegramLogo} alt=\"telegram logo\" />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Text from '../Text/Text';\r\nimport Stat from '../Stat/Stat';\r\nimport './main.scss'\r\nimport ToolBar from '../ToolBar/ToolBar';\r\nimport TextGenerator from '../TextGenerator/TextGenerator';\r\nimport headerLogo from '../../images/logo.svg';\r\nimport RecycleButton from '../RecycleButton/RecycleButton';\r\nimport RecycleBin from '../RecycleBin/RecycleBin';\r\nimport LocalStorage from '../../js/localStorage';\r\nimport Footer from '../Footer/Footer'\r\nimport Popup from '../Popup/Popup';\r\nimport { themeClassName } from '../../js/utilits/themeClassName';\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\n\r\nconst newLocalStorage = new LocalStorage()\r\n\r\n\r\nfunction Main(props) {\r\n\r\n    if (localStorage.recycle === undefined) { //создаем корзину если она еще не создана\r\n        newLocalStorage.loadTo('recycle', {}) \r\n    }\r\n    const themeData = React.useContext(ThemeContext);\r\n    const mainClassName = themeClassName(themeData, 'main')\r\n\r\n    // function onChangeText() {\r\n    //     let valueOfTextArea = document.querySelector('.text__input').value\r\n    //     this.setState({\r\n    //         text: valueOfTextArea,\r\n    //     })\r\n    // }\r\n\r\n    // function onChangeInRecycle() {\r\n    //     const newRecycleData = newLocalStorage.loadFrom('recycle');\r\n    //     this.setState({\r\n    //         recycle: newRecycleData\r\n    //     })\r\n    // }\r\n\r\n    // function popupInit(popupContent) {\r\n    //     console.log(popupContent)\r\n    //     this.setState({\r\n    //         contentOnPopup: popupContent\r\n    //     })\r\n    // }\r\n\r\n    // console.log(`В корзине ${Object.keys(this.state.recycle).length} объектов`)\r\n    // const recycleContent = this.state.recycle\r\n\r\n    return(\r\n        <div className={mainClassName}>\r\n            {/* <RecycleBin itemsInRecycle={'recycleContent'} onChangeInRecycle={this.onChangeInRecycle} onChangeText={this.onChangeText}/> */}\r\n            <Text onChangeText={props.onChangeText}/>\r\n            <ToolBar textValue={props.textValue} onChangeTheme={props.onChangeTheme}/>\r\n            {/* <ToolBar onChangeText={this.onChangeText} onChangeInRecycle={this.onChangeInRecycle} text={this.state.text} onPopupInit={this.popupInit}/> */}\r\n            <Footer />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Main;","export default __webpack_public_path__ + \"static/media/avatar.d9df8d24.jpg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './about-author.scss'\r\nimport avatar from '../../images/avatar.jpg';\r\n\r\n\r\n\r\nfunction AboutAuthor() {\r\n\r\n    return(\r\n        <div className='about-author'>\r\n            <img className='about-author__avatar' src={avatar} alt=\"Фото автора\" />\r\n            <h1 className='about-author__title'> Александр Афанасенко </h1>\r\n            <h2 className='about-author__subtitle'> Junior Frontend-разработчик </h2>\r\n            <a href=\"./\"><p className='footer__text'>Главная</p></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AboutAuthor;","export default __webpack_public_path__ + \"static/media/logo_dark.21fd0ed5.svg\";","import React from 'react';\r\nimport Stat from '../Stat/Stat';\r\nimport './header.scss'\r\nimport TextGenerator from '../TextGenerator/TextGenerator';\r\nimport headerLogo from '../../images/logo.svg';\r\nimport headerLogo_dark from '../../images/logo_dark.svg';\r\nimport RecycleButton from '../RecycleButton/RecycleButton';\r\nimport LocalStorage from '../../js/localStorage';\r\n\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\nimport { themeClassName } from '../../js/utilits/themeClassName';\r\n\r\nfunction Header(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext);\r\n    const classNameByTheme = themeClassName(themeData, 'header')\r\n    let logoImport\r\n    themeData.id === 0 ? logoImport = headerLogo : logoImport = headerLogo_dark\r\n\r\n\r\n    return(\r\n        <header className={classNameByTheme}>\r\n            <img className='header__logo' alt='app logo' src={logoImport} />\r\n            <Stat textValue={props.textValue} />\r\n            <TextGenerator onChangeText={props.onChangeText}/>\r\n            {/* <RecycleButton itemsInRecycle='1' onChangeInRecycle={'this.onChangeInRecycle'}/> */}\r\n        </header>\r\n        )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './App.scss';\r\nimport MainContent from './components/Main/Main';\r\nimport AboutAuthor from './components/AboutAuthor/AboutAuthor';\r\nimport { Route } from 'react-router-dom';\r\nimport Main from './components/Main/Main';\r\nimport Header from './components/Header/Header';\r\n\r\nimport { ThemeContext, themes } from './contexts/ThemeContext'\r\n\r\nfunction App() {\r\n\r\n  const [theme, changeTheme] = React.useState('dark');\r\n  const [textValue, changeText] = React.useState('');\r\n\r\n  return (\r\n    <ThemeContext.Provider value={themes[theme]}> \r\n\r\n      <div className=\"App\">\r\n          <Header textValue={textValue} onChangeText={changeText}/>\r\n\r\n          <Route exact path='/'>\r\n            <Main textValue={textValue} onChangeTheme={changeTheme} onChangeText={changeText}/>\r\n          </Route>\r\n\r\n          <Route path='/about'>\r\n            <AboutAuthor />\r\n          </Route>\r\n      </div>\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { BrowserRouter } from 'react-router-dom'; //библиотека для создания маршрутов внутри реакт приложения\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './styles/variables.scss'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter> \r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}