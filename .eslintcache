[{"D:\\FrontEnd\\06-text-counter\\src\\components\\Text\\Text.js":"1","D:\\FrontEnd\\06-text-counter\\src\\contexts\\TextContext.js":"2","D:\\FrontEnd\\06-text-counter\\src\\App.js":"3","D:\\FrontEnd\\06-text-counter\\src\\components\\Main\\Main.js":"4","D:\\FrontEnd\\06-text-counter\\src\\components\\Header\\Header.js":"5","D:\\FrontEnd\\06-text-counter\\src\\components\\Stat\\Stat.js":"6","D:\\FrontEnd\\06-text-counter\\src\\components\\Footer\\Footer.js":"7","D:\\FrontEnd\\06-text-counter\\src\\js\\constants.js":"8","D:\\FrontEnd\\06-text-counter\\src\\components\\PopupMessage\\PopupMessage.js":"9","D:\\FrontEnd\\06-text-counter\\src\\components\\ToolPaste\\ToolPaste.js":"10","D:\\FrontEnd\\06-text-counter\\src\\components\\ToolBar\\ToolBar.js":"11","D:\\FrontEnd\\06-text-counter\\src\\js\\localStorage.js":"12","D:\\FrontEnd\\06-text-counter\\src\\js\\utilits\\rightWord.js":"13","D:\\FrontEnd\\06-text-counter\\src\\components\\ToolClear\\ToolClear.js":"14","D:\\FrontEnd\\06-text-counter\\src\\index.js":"15","D:\\FrontEnd\\06-text-counter\\src\\components\\TextGenerator\\TextGenerator.js":"16","D:\\FrontEnd\\06-text-counter\\src\\components\\Button\\Button.js":"17","D:\\FrontEnd\\06-text-counter\\src\\components\\ButtonClosePopup\\ButtonClosePopup.js":"18","D:\\FrontEnd\\06-text-counter\\src\\js\\utilits.js":"19","D:\\FrontEnd\\06-text-counter\\src\\components\\ToolButton\\ToolButton.js":"20","D:\\FrontEnd\\06-text-counter\\src\\components\\ToolCopy\\ToolCopy.js":"21","D:\\FrontEnd\\06-text-counter\\src\\reportWebVitals.js":"22","D:\\FrontEnd\\06-text-counter\\src\\components\\ToggleTheme\\ToggleTheme.js":"23","D:\\FrontEnd\\06-text-counter\\src\\contexts\\ThemeContext.js":"24","D:\\FrontEnd\\06-text-counter\\src\\js\\utilits\\themeClassName.js":"25","D:\\FrontEnd\\06-text-counter\\src\\components\\About\\About.js":"26","D:\\FrontEnd\\06-text-counter\\src\\js\\aboutData.js":"27"},{"size":776,"mtime":1612707438125,"results":"28","hashOfConfig":"29"},{"size":205,"mtime":1612348546078,"results":"30","hashOfConfig":"29"},{"size":1511,"mtime":1612788614704,"results":"31","hashOfConfig":"29"},{"size":794,"mtime":1612707380759,"results":"32","hashOfConfig":"29"},{"size":1317,"mtime":1612783597983,"results":"33","hashOfConfig":"29"},{"size":1826,"mtime":1612599319499,"results":"34","hashOfConfig":"29"},{"size":2309,"mtime":1612783972810,"results":"35","hashOfConfig":"29"},{"size":288,"mtime":1612703830933,"results":"36","hashOfConfig":"29"},{"size":507,"mtime":1612689102868,"results":"37","hashOfConfig":"29"},{"size":1333,"mtime":1612703814989,"results":"38","hashOfConfig":"29"},{"size":1988,"mtime":1612707544077,"results":"39","hashOfConfig":"29"},{"size":663,"mtime":1612725747048,"results":"40","hashOfConfig":"29"},{"size":1014,"mtime":1608896841278,"results":"41","hashOfConfig":"29"},{"size":751,"mtime":1612706301043,"results":"42","hashOfConfig":"29"},{"size":757,"mtime":1612770072908,"results":"43","hashOfConfig":"29"},{"size":3148,"mtime":1612608271744,"results":"44","hashOfConfig":"29"},{"size":970,"mtime":1612169483664,"results":"45","hashOfConfig":"29"},{"size":762,"mtime":1608996526111,"results":"46","hashOfConfig":"29"},{"size":868,"mtime":1609495242431,"results":"47","hashOfConfig":"29"},{"size":829,"mtime":1609863969593,"results":"48","hashOfConfig":"29"},{"size":967,"mtime":1612689376288,"results":"49","hashOfConfig":"29"},{"size":375,"mtime":1608733365293,"results":"50","hashOfConfig":"29"},{"size":807,"mtime":1612548474835,"results":"51","hashOfConfig":"29"},{"size":249,"mtime":1612720800022,"results":"52","hashOfConfig":"29"},{"size":239,"mtime":1612462339669,"results":"53","hashOfConfig":"29"},{"size":2307,"mtime":1612789366229,"results":"54","hashOfConfig":"29"},{"size":2196,"mtime":1612790145392,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},"j9loub",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"59"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"59"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"59"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"93"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"106"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"75"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\FrontEnd\\06-text-counter\\src\\components\\Text\\Text.js",["132"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './text.scss'\r\n\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport { themeClassName } from '../../js/utilits/themeClassName';\r\n\r\nfunction Text(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext);\r\n    const inputClassName = themeClassName(themeData, 'text__input')\r\n\r\n    function sendTextToStatCount() {\r\n        props.onChangeText(document.querySelector('.text__input').value)\r\n    }\r\n\r\n    return(\r\n        <div className='text'>\r\n            <textarea onChange={sendTextToStatCount}\r\n                    className={inputClassName} \r\n                    type=\"text\" \r\n                    placeholder=\"Ваш текст\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Text;",["133","134"],"D:\\FrontEnd\\06-text-counter\\src\\contexts\\TextContext.js",[],["135","136"],"D:\\FrontEnd\\06-text-counter\\src\\App.js",["137","138"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './App.scss';\r\nimport { Route, useRouteMatch } from 'react-router-dom';\r\nimport Main from './components/Main/Main';\r\nimport Header from './components/Header/Header';\r\n\r\nimport { ThemeContext, themes } from './contexts/ThemeContext'\r\nimport { LocalStorage } from './js/localStorage';\r\nimport About from './components/About/About';\r\n\r\nfunction App() {\r\n\r\n  const defaultTheme = new LocalStorage()\r\n  const theme = defaultTheme.check()\r\n\r\n  const [themeToUse, changeTheme] = React.useState(theme);\r\n  const [textValue, changeText] = React.useState('');\r\n\r\n  function rememberTheme(newTheme) {\r\n    changeTheme(newTheme)\r\n    defaultTheme.set(newTheme)\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={themes[themeToUse]}>\r\n\r\n      <div className=\"App\">\r\n\r\n            <Route exact path='/Textcounter'>\r\n              <Header textValue={textValue} onChangeText={changeText} onlyLogo={false}/> \r\n              <Main textValue={textValue} onChangeTheme={rememberTheme} onChangeText={changeText}/>\r\n            </Route>\r\n\r\n            <Route path='/Textcounter/about-author'>\r\n              <Header onlyLogo={true}/> \r\n              <About content='about-author'/>\r\n            </Route>\r\n\r\n            <Route path='/Textcounter/about-project'>\r\n              <Header onlyLogo={true}/> \r\n              <About content='about-project'/>\r\n            </Route>\r\n\r\n      </div>\r\n      \r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;","D:\\FrontEnd\\06-text-counter\\src\\components\\Main\\Main.js",["139","140"],"import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Text from '../Text/Text';\r\nimport ToolBar from '../ToolBar/ToolBar';\r\nimport Footer from '../Footer/Footer'\r\nimport { themeClassName } from '../../js/utilits/themeClassName';\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\nimport './main.scss'\r\n\r\nfunction Main(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext);\r\n    const mainClassName = themeClassName(themeData, 'main')\r\n\r\n    return(\r\n        <div className={mainClassName}>\r\n            <Text onChangeText={props.onChangeText}/>\r\n            <ToolBar textValue={props.textValue} onChangeTheme={props.onChangeTheme} onChangeText={props.onChangeText}/>\r\n            <Footer />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Main;",["141","142"],"D:\\FrontEnd\\06-text-counter\\src\\components\\Header\\Header.js",["143"],"D:\\FrontEnd\\06-text-counter\\src\\components\\Stat\\Stat.js",["144"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stat.scss'\r\nimport '../../styles/main.scss'\r\nimport { rightWord } from '../../js/utilits/rightWord'\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\nimport { themeClassName } from '../../js/utilits/themeClassName';\r\n\r\nfunction Stat(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext);\r\n    const numbersClassName = themeClassName(themeData, 'stat__number')\r\n\r\n    function symbolsCount() {\r\n        const text = props.textValue\r\n        return text.length\r\n    }\r\n\r\n    function wordsCount() {\r\n        const paragraphSymbol = /\\n/g\r\n        const text = props.textValue.toLowerCase().replace(paragraphSymbol, ' ')\r\n        const words = text.split(' ').filter((item) => { //split делает массив из строк разделенных ' '\r\n            return item !== ''  //filter создает новый массив убирая из старого пустые строки\r\n        })\r\n        return words.length      \r\n    }\r\n\r\n    function paragraphsCount() {\r\n        const text = props.textValue\r\n        const paragraphs = text.split('\\n').filter((item) => { //split делает массив из строк разделенных ' '\r\n            return item !== ''  //filter создает новый массив убирая из старого пустые строки\r\n        })\r\n        return paragraphs.length      \r\n    }\r\n\r\n    return(\r\n        <div className='stat'>\r\n            <p className={numbersClassName}>{rightWord(symbolsCount(), 'знак')}</p>\r\n            <p className={numbersClassName}>{rightWord(wordsCount(), 'слово')}</p>\r\n            <p className={numbersClassName}>{rightWord(paragraphsCount(), 'абзац')}</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Stat;",["145","146"],"D:\\FrontEnd\\06-text-counter\\src\\components\\Footer\\Footer.js",[],"D:\\FrontEnd\\06-text-counter\\src\\js\\constants.js",[],"D:\\FrontEnd\\06-text-counter\\src\\components\\PopupMessage\\PopupMessage.js",["147"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\nimport { themeClassName } from '../../js/utilits/themeClassName';\r\n\r\nimport './popup-message.scss'\r\n\r\nfunction PopupMessage() {\r\n\r\n    const themeData = React.useContext(ThemeContext);\r\n    const messageClassName = themeClassName(themeData, 'popup-message')\r\n\r\n    return(\r\n    <p className={`${messageClassName} popup-message_unactive`}></p>\r\n    )\r\n}\r\n\r\nexport default PopupMessage;","D:\\FrontEnd\\06-text-counter\\src\\components\\ToolPaste\\ToolPaste.js",["148"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport pasteIconLight from '../../images/paste_icon_light.svg'\r\nimport pasteIconDark from '../../images/paste_icon_dark.svg'\r\nimport { showPopupMessage } from '../../js/utilits'\r\nimport ToolButton from '../ToolButton/ToolButton';\r\nimport { popupColors } from '../../js/constants';\r\n\r\nfunction ToolPaste(props) {\r\n   \r\n    let pasteIcon\r\n    props.theme === 'light' ? pasteIcon = pasteIconLight : pasteIcon = pasteIconDark\r\n\r\n    function pasteInTextArea(event) {\r\n\r\n        navigator.clipboard.readText()\r\n        .then(text => {\r\n            document.querySelector('.text__input').value = text\r\n            sendTextToStatCount(text)\r\n        }).then(() => {\r\n            if (document.querySelector('.text__input').value.length === 0) {\r\n                console.log(popupColors.red)\r\n                showPopupMessage(event.clientX, event.clientY, 'ошибка, возможно в буфере находится не текст', popupColors.red)\r\n            }\r\n        })\r\n    }\r\n    \r\n    function sendTextToStatCount(text) {\r\n        props.onChangeText(text)\r\n    }\r\n\r\n    return (\r\n    <ToolButton \r\n        type='paste'\r\n        icon={pasteIcon}\r\n        isActive={props.isActive}\r\n        onClick={pasteInTextArea}\r\n    />\r\n    )\r\n}\r\n\r\nexport default ToolPaste;","D:\\FrontEnd\\06-text-counter\\src\\components\\ToolBar\\ToolBar.js",["149"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PopupMessage from '../PopupMessage/PopupMessage';\r\nimport ToolPaste from '../ToolPaste/ToolPaste';\r\nimport ToolCopy from '../ToolCopy/ToolCopy';\r\nimport ToolClear from '../ToolClear/ToolClear';\r\nimport ToggleTheme from '../ToggleTheme/ToggleTheme';\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\nimport './toolbar.scss'\r\n\r\nfunction ToolBar(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext);\r\n    let themeProp\r\n    themeData.id === 0 ? themeProp = 'light' : themeProp = 'dark' \r\n\r\n    function onChangeText(text) {\r\n        props.onChangeText(text); //эта строка отправляет данные поля ввода в пропсы maincontent\r\n    }\r\n\r\n    function onChangeInRecycle() {\r\n        console.log('toolbar on change in recycle')\r\n        props.onChangeInRecycle(); //эта строка отправляет данные поля ввода в пропсы maincontent\r\n    }\r\n\r\n    function onPopupInit(popupContent) {\r\n        props.onPopupInit(popupContent)\r\n    }\r\n\r\n    let isTextAreaHasContent = true\r\n\r\n    let isClibBoardHasContent = true\r\n    if (props.textValue.length === 0) {\r\n        isTextAreaHasContent = false\r\n    }\r\n    navigator.clipboard.readText()\r\n    .then(text => {\r\n        if (text.length === 0) {\r\n            isClibBoardHasContent = false\r\n        }    \r\n    })\r\n    \r\n    return(\r\n        <div className='toolbar'>\r\n            <ToggleTheme onChangeTheme={props.onChangeTheme}/>\r\n            <ToolCopy theme={themeProp} isActive={isTextAreaHasContent} onChangeText={onChangeText}/>\r\n            <ToolPaste theme={themeProp} isActive={isClibBoardHasContent} onChangeText={onChangeText}/>\r\n            <ToolClear theme={themeProp} isActive={isTextAreaHasContent} onChangeText={onChangeText} onChangeInRecycle={onChangeInRecycle} onPopupInit={onPopupInit}/>\r\n            <PopupMessage />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToolBar;","D:\\FrontEnd\\06-text-counter\\src\\js\\localStorage.js",[],"D:\\FrontEnd\\06-text-counter\\src\\js\\utilits\\rightWord.js",[],["150","151"],"D:\\FrontEnd\\06-text-counter\\src\\components\\ToolClear\\ToolClear.js",["152"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport deleteIconLight from '../../images/delete_icon_light.svg'\r\nimport deleteIconDark from '../../images/delete_icon_dark.svg'\r\nimport ToolButton from '../ToolButton/ToolButton';\r\n\r\nfunction ToolClear(props) {\r\n\r\n    let deleteIcon\r\n    props.theme === 'light' ? deleteIcon = deleteIconLight : deleteIcon = deleteIconDark\r\n\r\n    function clearTextArea() {\r\n        document.querySelector('.text__input').value = ''\r\n        props.onChangeText('');\r\n    }\r\n\r\n    return (\r\n        <ToolButton \r\n            type='clear text area'\r\n            icon={deleteIcon}\r\n            isActive={props.isActive}\r\n            onClick={clearTextArea}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ToolClear;","D:\\FrontEnd\\06-text-counter\\src\\index.js",[],["153","154"],"D:\\FrontEnd\\06-text-counter\\src\\components\\TextGenerator\\TextGenerator.js",["155","156"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { showPopupMessage } from '../../js/utilits'\r\nimport fishicon from '../../images/fish.svg'\r\nimport Button from '../Button/Button'\r\nimport axios from 'axios'\r\n// import { ThemeContext } from '../../contexts/ThemeContext'\r\n\r\n// const api = (template) => new Api(template);\r\nconst API = 'https://fish-text.ru/get?type=paragraph&number=10'\r\n\r\nclass TextGenerator extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n\r\n        this.textGen = this.textGen.bind(this)\r\n        this.editText = this.editText.bind(this)\r\n        this.sendTextToStatCount = this.sendTextToStatCount.bind(this)\r\n    }\r\n\r\n    sendTextToStatCount(text) {\r\n        this.props.onChangeText(text)\r\n    }\r\n    \r\n    editText(text) {\r\n        const textToReplace = /\\\\n\\\\n/g\r\n        let editedText = text.replace(textToReplace, '\\n')\r\n        return editedText\r\n    }\r\n    \r\n    textGen() {\r\n        axios.get(API)\r\n            .then((res) => {\r\n                const editedText = this.editText(res.data.text)\r\n                document.querySelector('.text__input').value = document.querySelector('.text__input').value + editedText\r\n                this.sendTextToStatCount(document.querySelector('.text__input').value)\r\n            })\r\n            .catch(() => {\r\n                console.log('Error in server request')\r\n                // showPopupMessage(event.clientX, event.clientY, 'Ошибка запроса к серверу fish-text.ru', 'red')\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Button \r\n                type='main' \r\n                color='red' \r\n                onClick={this.textGen} \r\n                icon={fishicon} \r\n                alt='fish text button'\r\n            />\r\n        )\r\n    }\r\n\r\n    // const themeData = React.useContext(ThemeContext);\r\n    // let buttonColor\r\n    // themeData.id === 0 ? buttonColor = 'red' : buttonColor = '#b10000'\r\n\r\n\r\n    // textGen(event) {\r\n    //     api('standings').request()\r\n    //         .then((result) => {\r\n    //             editText(result.text)\r\n    //         })\r\n    //         .catch(() => {\r\n    //             console.log('Error in server request')\r\n    //             // showPopupMessage(event.clientX, event.clientY, 'Ошибка запроса к серверу fish-text.ru', 'red')\r\n    //         })\r\n    // }\r\n\r\n\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    //     this.state = {\r\n    //         popupWasShown: false\r\n    //     }\r\n\r\n    // }\r\n\r\n    // statCount() {\r\n    //     this.props.onChangeText();\r\n    // }\r\n\r\n\r\n    // showPopup(event) {\r\n    //     showPopupMessage(event.clientX, event.clientY, 'генерировать рыбный текст', 'black')\r\n    //     this.setState({popupWasShown: true})\r\n    //     setTimeout(() => {\r\n    //         this.setState({popupWasShown: false})\r\n    //     }, 60000)\r\n    // }\r\n\r\n    // let showPopupFunc = this.showPopup\r\n    // if (this.state.popupWasShown === true) {\r\n    //     showPopupFunc = null;\r\n    // }\r\n    \r\n}\r\n\r\nexport default TextGenerator;","D:\\FrontEnd\\06-text-counter\\src\\components\\Button\\Button.js",["157"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './button.scss'\r\n\r\nfunction Button(props) {\r\n\r\n    function iconRender() {\r\n        const iconClassName = `button__icon_${props.type}`\r\n        return (props.icon ? \r\n            <img className={iconClassName} alt={props.icon} src={props.icon}></img> : null)\r\n        }\r\n\r\n    function counterRender() {\r\n        return (props.counter && props.counter !== 0 ? \r\n            <div className='button__counter'>{props.counter}</div> : null)\r\n        }\r\n\r\n    function textRender() {\r\n        return (props.text ? props.text : null)\r\n        }\r\n    \r\n    const buttonClassName = `button button_${props.type}`\r\n    const background = props.color\r\n\r\n    return (\r\n        <button onClick={props.onClick} className={buttonClassName} style={{background: background}}>\r\n            {iconRender()}\r\n            {counterRender()}\r\n            {textRender()}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;",["158","159"],"D:\\FrontEnd\\06-text-counter\\src\\components\\ButtonClosePopup\\ButtonClosePopup.js",["160"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './button-close-popup.scss'\r\nimport closeIcon from '../../images/close.svg'\r\n\r\nclass ButtonClosePopup extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            type: this.props.type\r\n        };\r\n\r\n        this.close = this.close.bind(this)\r\n\r\n    }\r\n\r\n    close() {\r\n        document.querySelector(`.${this.props.classToClose}`).classList.remove(`${this.props.classToClose}_active`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={this.close} className='button-close-popup'>\r\n                <img src={closeIcon} alt=\"close\" />\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ButtonClosePopup;",["161","162"],"D:\\FrontEnd\\06-text-counter\\src\\js\\utilits.js",[],"D:\\FrontEnd\\06-text-counter\\src\\components\\ToolButton\\ToolButton.js",["163"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './tool-button.sass'\r\n\r\nclass ToolButton extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        let className = 'tool-button'\r\n        let functionToAction = null\r\n        if (this.props.isActive === true) {\r\n            className = 'tool-button tool-button_active'\r\n            functionToAction = this.props.onClick\r\n        } \r\n\r\n        return(\r\n            <button className={className}>\r\n                <img className='tool-button__icon'\r\n                    onClick={functionToAction}\r\n                    src={this.props.icon} \r\n                    alt={this.props.type}>\r\n                </img>\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToolButton;","D:\\FrontEnd\\06-text-counter\\src\\components\\ToolCopy\\ToolCopy.js",["164"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport copyIconLight from '../../images/copy_icon_light.svg'\r\nimport copyIconDark from '../../images/copy_icon_dark.svg'\r\nimport { showPopupMessage } from '../../js/utilits'\r\nimport ToolButton from '../ToolButton/ToolButton';\r\nimport { popupColors } from '../../js/constants';\r\n\r\nfunction ToolCopy(props) {\r\n\r\n    let copyIcon\r\n    props.theme === 'light' ? copyIcon = copyIconLight : copyIcon = copyIconDark\r\n\r\n    function copyTextArea(event) {\r\n        const text = document.querySelector('.text__input').value\r\n        navigator.clipboard.writeText(text);\r\n        showPopupMessage(event.clientX, event.clientY, 'Скопировано в буфер', popupColors.green)\r\n    }\r\n\r\n    return (\r\n        <ToolButton \r\n            type='copy'\r\n            icon={copyIcon}\r\n            isActive={props.isActive}\r\n            onClick={copyTextArea}\r\n        />\r\n    )\r\n    \r\n}\r\n\r\nexport default ToolCopy;","D:\\FrontEnd\\06-text-counter\\src\\reportWebVitals.js",[],"D:\\FrontEnd\\06-text-counter\\src\\components\\ToggleTheme\\ToggleTheme.js",["165"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ToolButton from '../ToolButton/ToolButton';\r\nimport darkThemeIcon from '../../images/darktheme_icon.svg'\r\nimport lightThemeIcon from '../../images/lighttheme_icon.svg'\r\n\r\nimport { ThemeContext } from '../../contexts/ThemeContext'\r\n\r\nfunction ToggleTheme(props) {\r\n\r\n    const themeData = React.useContext(ThemeContext)\r\n    let icon\r\n    themeData.id === 0 ? icon = darkThemeIcon : icon = lightThemeIcon\r\n\r\n    function toggle() {\r\n        themeData.id === 0 ? props.onChangeTheme('dark') : props.onChangeTheme('light')  \r\n    }\r\n\r\n    return(\r\n        <ToolButton \r\n            type='toggle theme'\r\n            icon={icon}\r\n            isActive = {true}\r\n            onClick={toggle}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ToggleTheme;","D:\\FrontEnd\\06-text-counter\\src\\contexts\\ThemeContext.js",[],"D:\\FrontEnd\\06-text-counter\\src\\js\\utilits\\themeClassName.js",[],"D:\\FrontEnd\\06-text-counter\\src\\components\\About\\About.js",["166"],"D:\\FrontEnd\\06-text-counter\\src\\js\\aboutData.js",[],{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"171","replacedBy":"175"},{"ruleId":"173","replacedBy":"176"},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"167","severity":1,"message":"177","line":5,"column":17,"nodeType":"169","messageId":"170","endLine":5,"endColumn":30},{"ruleId":"167","severity":1,"message":"178","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":26},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"171","replacedBy":"179"},{"ruleId":"173","replacedBy":"180"},{"ruleId":"167","severity":1,"message":"181","line":9,"column":10,"nodeType":"169","messageId":"170","endLine":9,"endColumn":15},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"171","replacedBy":"182"},{"ruleId":"173","replacedBy":"183"},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"171","replacedBy":"184"},{"ruleId":"173","replacedBy":"185"},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"171","replacedBy":"186"},{"ruleId":"173","replacedBy":"187"},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"167","severity":1,"message":"188","line":3,"column":10,"nodeType":"169","messageId":"170","endLine":3,"endColumn":26},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"171","replacedBy":"189"},{"ruleId":"173","replacedBy":"190"},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"171","replacedBy":"191"},{"ruleId":"173","replacedBy":"192"},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"167","severity":1,"message":"168","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","no-native-reassign",["193"],"no-negated-in-lhs",["194"],["193"],["194"],"'useRouteMatch' is defined but never used.","'useEffect' is defined but never used.",["193"],["194"],"'Route' is defined but never used.",["193"],["194"],["193"],["194"],["193"],["194"],"'showPopupMessage' is defined but never used.",["193"],["194"],["193"],["194"],"no-global-assign","no-unsafe-negation"]